{"version":3,"sources":["serviceWorker.ts","consts.ts","../../node_modules/style-inject/dist/style-inject.es.js","../../src/utils.ts","../../src/Heading.tsx","../../src/index.tsx","Header.tsx","Footer.tsx","MainContent/CodeBlock.tsx","MainContent/index.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CONTENT","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","title","level","titleLimit","this","generateList","string","listItem","React.createElement","href","toLowerCase","replace","trimRight","split","join","stringLimit","rawTitle","length","slice","createTitle","markdownText","lowestHeadingLevel","className","limit","styles","matchedHeadings","numberOftargetHeadings","headingRegex","RegExp","extractHeadingsFromMd","headingObjects","map","heading","headingText","matchedHashes","headingLevel","newHeading","headingTags","index","React.Fragment","key","Title","styled","h1","Header","AppBar","position","BottomNav","BottomNavigation","Footer","CodeBlock","language","value","flatten","text","child","React","Children","toArray","props","children","reduce","HeadingRenderer","slug","id","MainContent","Fragment","source","renderers","code","App","MainContainer","Card","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b1538ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","const CONTENT = `\n# Overview\n\nThe idea is that you can automatically create a customizable table of contents from your markdown text.\n\nPRs/Issues are always welcome.\n\n# Installation\n\n## Install the package with npm\n\nRun the command below.\n\n\\`\\`\\`bash\nnpm install --save react-toc\n\\`\\`\\`\n\n## Install the package with yarn\n\nRun the command below.\n\n\\`\\`\\`bash\nyarn add react-toc\n\\`\\`\\`\n\n# Usage\n\nImport Toc from the package and pass props to it. As for now, \\`markdownText\\` is the only required prop.\n\n\\`\\`\\`jsx\nimport React from \"react\";\nimport Toc from \"react-toc\";\n\nconst Example = () => {\nconst yourMarkdownText = '# test \\n your markdown Content # test2\\n'\nreturn <Toc markdownText={yourMarkdownText} />\n};\n\nexport default Example;\n\\`\\`\\`\n\n# Props\n\n| Name               | Type              | Description                                                                   |\n| ------------------ | ----------------- | ----------------------------------------------------------------------------- |\n| \\`markdownText\\`       | string            | **Required** The markdown text you want to creat a TOC from.                   |\n| \\`titleLimit\\`         | number            | The maximum length of each title in the TOC.                                  |\n| \\`lowestHeadingLevel\\` | number            | The lowest level of headings you want to extract from the given markdownText. |\n| \\`className\\`          | strig             | Your custom className.                                                        |\n| \\`type\\`               | \"deafult\" or\"raw\" | The type of a TOC you want to use.                                            |\n\n# CustomDesign\n\n## Add a custom className\n\nPass \\`className\\` like the code below.\n\n\\`\\`\\`jsx\nimport React from \"react\";\nimport Toc from \"react-toc\";\n\nconst Example = () => {\nconst yourMarkdownText = '# test \\n your markdown Content # test2\\n'\nreturn <Toc markdownText={yourMarkdownText} className={\"customClassName\"}/>\n};\n\nexport default Example;\n\\`\\`\\`\n\n## Style the custom class\n\nNow you can style your custom class just like the code below.\n\n\\`\\`\\`css\n.customClassName  {\n  border: solid 1px;\n}\n.customClassName > li {\n  padding-bottom: 10px;\n}\n\\`\\`\\`\n`;\n\nexport { CONTENT };\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Removes # and connects each word with '-'.\n// It also replaces !/? with '-'.\nconst createLink = (string: string): string => {\n  const shapedString = string\n    .toLowerCase()\n    .replace(/^#+\\s/, \"\")\n    .trimRight();\n  const anchor = shapedString\n    .split(\" \")\n    .join(\"-\")\n    .replace(/[?!]/g, \"-\");\n  return anchor;\n};\n\n// It removes # from the given string. And it shortens the string if its longer than \"stringLimit\".\nconst createTitle = (string: string, stringLimit: number) => {\n  const rawTitle = string.replace(/^#+\\s/g, \"\");\n\n  if (rawTitle.length >= stringLimit)\n    return `${rawTitle.slice(0, stringLimit)}..`;\n\n  return rawTitle;\n};\n\n// It extracts headings from the given markdownText.\nconst extractHeadingsFromMd = (\n  markdownText: string,\n  numberOftargetHeadings: number\n): RegExpMatchArray | null => {\n  const headingRegex = new RegExp(\n    `^#{1,${numberOftargetHeadings}}\\\\s.+\\\\n`,\n    \"gm\"\n  );\n  return markdownText.match(headingRegex);\n};\n\nexport { createLink, createTitle, extractHeadingsFromMd };\n","import * as React from \"react\";\nimport { createLink, createTitle } from \"./utils\";\n\nexport default class Heading {\n  title: string;\n  level: number;\n  titleLimit: number;\n\n  constructor(title: string, level: number, titleLimit: number) {\n    this.title = title;\n    this.level = level;\n    this.titleLimit = titleLimit;\n  }\n\n  generateList() {\n    const listItem = (\n      <li>\n        <a href={`#${createLink(this.title)}`}>\n          {createTitle(this.title, this.titleLimit)}\n        </a>\n      </li>\n    );\n\n    return <>{nestUl(this.level, listItem)}</>;\n  }\n}\n\n/*\n Create a new heading object from the given string\n*/\nconst newHeading = (headingText: string, titleLimit: number) => {\n  const matchedHashes = headingText.match(/^#+/);\n  if (!matchedHashes) return null;\n  const headingLevel: number = matchedHashes[0].split(\"\").length;\n\n  return new Heading(headingText, headingLevel, titleLimit);\n};\n\n/* \n Return a nested Unordered list based on the given heading level.\n*/\nconst nestUl = (level: number, listItem: React.ReactNode) => {\n  switch (level) {\n    case 1:\n      return listItem;\n    case 2:\n      return <ul>{listItem}</ul>;\n    case 3:\n      return (\n        <ul>\n          <ul>{listItem}</ul>\n        </ul>\n      );\n    case 4:\n      return (\n        <ul>\n          <ul>\n            <ul>{listItem}</ul>\n          </ul>\n        </ul>\n      );\n    case 5:\n      return (\n        <ul>\n          <ul>\n            <ul>\n              <ul>{listItem}</ul>\n            </ul>\n          </ul>\n        </ul>\n      );\n    case 6:\n      return (\n        <ul>\n          <ul>\n            <ul>\n              <ul>\n                <ul>{listItem}</ul>\n              </ul>\n            </ul>\n          </ul>\n        </ul>\n      );\n    default:\n      return listItem;\n  }\n};\n\nexport { newHeading };\n","import * as React from \"react\";\nimport styles from \"./styles.module.css\";\nimport { extractHeadingsFromMd } from \"./utils\";\nimport Heading, { newHeading } from \"./Heading\";\n\ninterface Props {\n  /*\n    The markdown text you want to creat a TOC from.\n   */\n  markdownText: string;\n  /*\n    The maximum length of each title in the TOC.\n  */\n  titleLimit?: number;\n  /*\n    The lowest level of headings you want to extract from the given markdownText.\n  */\n  lowestHeadingLevel?: number;\n  /*\n    The custom className.\n    You can style the TOC like this.\n\n    ```css\n    .customClassName  {\n      border: solid 1px;\n    }\n    .customClassName > li {\n      padding-bottom: 10px;\n    }\n    ```\n  */\n  className?: string;\n  /*\n    The type of a TOC you want to use.\n  */\n  type?: \"default\" | \"raw\"; // \"fixed-left\" | \"fixed-right\" | \"material\" | \"bootstrap\"\n}\n\nconst Toc = ({\n  markdownText,\n  titleLimit,\n  lowestHeadingLevel,\n  className,\n  type\n}: Props) => {\n  // Set default values\n  const limit = titleLimit ? titleLimit : 200;\n  const defaultClass = type === \"raw\" ? \"\" : \"react-toc\";\n  const customClass = className || defaultClass;\n  const headingLevel: number = lowestHeadingLevel || 6;\n\n  // Style settings\n  const style: string | undefined = styles[customClass] || className;\n\n  // Mutate headings\n  const matchedHeadings: RegExpMatchArray | null = extractHeadingsFromMd(\n    markdownText,\n    headingLevel\n  );\n  const headingObjects = matchedHeadings?.map(heading =>\n    newHeading(heading, limit)\n  );\n  const headingTags:\n    | JSX.Element[]\n    | undefined = headingObjects?.map((heading: Heading) =>\n    heading.generateList()\n  );\n\n  if (!headingTags) return null;\n\n  return (\n    <ul className={style}>\n      {headingTags.map((heading: JSX.Element, index: number) => (\n        <React.Fragment key={index}>{heading}</React.Fragment>\n      ))}\n    </ul>\n  );\n};\n\nexport default Toc;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport AppBar from \"@material-ui/core/AppBar\";\n\nconst Title = styled.h1`\n  margin: auto;\n  padding: 10px 0;\n  width: 80%;\n`;\n\nconst Header = () => {\n  return (\n    <AppBar position=\"static\">\n      <Title>React Toc</Title>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BottomNavigation } from \"@material-ui/core\";\n\nconst BottomNav = styled(BottomNavigation)`\n  height: 500px;\n  margin-top: 50px;\n  padding: 10px;\n  border-top: solid 1px;\n  background-color: #3f51b5;\n`;\n\nconst Footer = () => {\n  return <BottomNav>React Toc</BottomNav>;\n};\n\nexport default Footer;\n","import React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\n\ninterface Props {\n  language: string;\n  value: string;\n}\n\nconst CodeBlock = ({ language, value }: Props) => {\n  return <SyntaxHighlighter language={language}>{value}</SyntaxHighlighter>;\n};\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"./CodeBlock\";\n\ninterface Props {\n  markdownText: string;\n}\n\nconst flatten = (text: string, child: any): any => {\n  return typeof child === \"string\"\n    ? text + child\n    : React.Children.toArray(child.props.children).reduce(flatten, text);\n};\n\nexport const HeadingRenderer = (props: any) => {\n  var children = React.Children.toArray(props.children);\n  var text = children.reduce(flatten, \"\");\n  var slug = text.toLowerCase().replace(/[!?\\s]/g, \"-\");\n  return React.createElement(\n    \"h\" + props.level,\n    { id: slug, className: \"anchor\" },\n    props.children\n  );\n};\n\nconst MainContent = ({ markdownText }: Props) => {\n  return (\n    <React.Fragment>\n      <ReactMarkdown\n        source={markdownText}\n        renderers={{\n          code: CodeBlock,\n          heading: HeadingRenderer,\n        }}\n        className=\"post-content\"\n      />\n    </React.Fragment>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\nimport { CONTENT } from \"./consts\";\nimport Toc from \"react-toc\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport MainContent from \"./MainContent\";\nimport { Card } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport \"./design.css\";\n\nconst App = () => {\n  const MainContainer = styled(Card)`\n    width: 70%;\n    padding: 20px;\n    margin: auto;\n    margin-top: 2em;\n  `;\n\n  return (\n    <React.Fragment>\n      <Header />\n      <MainContainer>\n        <h1>Table of contents</h1>\n        <Toc markdownText={CONTENT} lowestHeadingLevel={5} />\n        <MainContent markdownText={CONTENT} />\n      </MainContainer>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}